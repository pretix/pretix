# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-07-16 13:33
from __future__ import unicode_literals

import django.db.models.deletion
import i18nfield.fields
from django.db import migrations, models
from i18nfield.strings import LazyI18nString


def tax_rate_converter(app, schema_editor):
    EventSettingsStore = app.get_model('pretixbase', 'Event_SettingsStore')
    Item = app.get_model('pretixbase', 'Item')
    TaxRule = app.get_model('pretixbase', 'TaxRule')

    for i in Item.objects.select_related('event').exclude(tax_rate=0):
        try:
            i.tax_rule = i.event.tax_rules.get(rate=i.tax_rate)
        except TaxRule.DoesNotExist:
            tr = i.event.tax_rules.create(rate=i.tax_rate, name=LazyI18nString({
                'en': 'VAT',
                'de': 'MwSt.',
                'de-informal': 'MwSt.'
            }))
            i.tax_rule = tr
        i.save()

    for setting in EventSettingsStore.objects.filter(key='tax_rate_default'):
        try:
            tr = i.event.tax_rules.get(rate=setting.value)
        except TaxRule.DoesNotExist:
            tr = i.event.tax_rules.create(rate=setting.value, name=LazyI18nString({
                'en': 'VAT',
                'de': 'MwSt.',
                'de-informal': 'MwSt.'
            }))
        setting.value = tr.pk
        setting.save()


class Migration(migrations.Migration):

    dependencies = [
        ('pretixbase', '0068_subevent_frontpage_text'),
    ]

    operations = [
        migrations.CreateModel(
            name='TaxRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', i18nfield.fields.I18nCharField(help_text='Should be short, e.g. "VAT"', max_length=190, verbose_name='Name')),
                ('rate', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Tax rate')),
                ('price_includes_tax', models.BooleanField(default=True, verbose_name='The configured product prices includes the tax amount')),
                ('eu_reverse_charge', models.BooleanField(default=False, help_text='Not recommended. Most events will NOT be '
                                                                     'qualified for reverse charge since the place of taxation is the location of the event. This option only enables reverse charge for business customers who entered a valid EU VAT ID. Only enable this option after consulting a tax counsel. No warranty given for correct tax calculation.', verbose_name='Use EU reverse charge taxation')),
                ('home_country', models.CharField(blank=True, choices=[('AT', 'Austria'), ('BE', 'Belgium'), ('BG', 'Bulgaria'), ('HR', 'Croatia'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('EE', 'Estonia'), ('FI', 'Finland'), ('FR', 'France'), ('DE', 'Germany'), ('GR', 'Greece'), ('HU', 'Hungary'), ('IE', 'Ireland'), ('IT', 'Italy'), ('LV', 'Latvia'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MT', 'Malta'), ('NL', 'Netherlands'), ('PL', 'Poland'), ('PT', 'Portugal'), ('RO', 'Romania'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('ES', 'Spain'), ('SE', 'Sweden'), ('UJ', 'United Kingdom')], help_text='Your country. Only relevant for EU reverse charge.', max_length=2, verbose_name='Merchant country')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tax_rules', to='pretixbase.Event')),
            ],
        ),
        migrations.AddField(
            model_name='item',
            name='tax_rule',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pretixbase.TaxRule', verbose_name='Sales tax'),
        ),
        migrations.RunPython(
            tax_rate_converter,
        ),
        migrations.RemoveField(
            model_name='item',
            name='tax_rate',
        ),
    ]
